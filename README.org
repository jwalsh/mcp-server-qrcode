#+TITLE: MCP QR Code Server

* Overview
Generate QR codes seamlessly across multiple interfaces using the Model Context Protocol (MCP).

* Installation
#+begin_src bash :tangle generated/mcp-server-qrcode-install.sh :mkdirp yes
npm view @jwalsh/mcp-server-qrcode

npm install -g @jwalsh/mcp-server-qrcode
#+end_src

* Usage

** MCP Server Usage (Primary Mode)
#+begin_src bash :tangle generated/mcp-server-qrcode-test.sh :mkdirp yes
# Install the MCP server globally
npm install -g @jwalsh/mcp-server-qrcode

# The server is now available for use with MCP clients
# such as Claude Desktop or MCP Inspector
#+end_src

*** With Claude Desktop
To use this QR code generator with Claude Desktop:

1. Configure Claude Desktop to use the MCP server
2. Use the "Generate QR Code" tool to create QR codes for:
   - URLs
   - Plain text
   - Contact information
   - Wi-Fi credentials

*** With MCP Inspector
For development and testing with MCP Inspector:

#+begin_src bash
# Install the MCP Inspector
npm install -g @modelcontextprotocol/inspector

# Run the inspector with the QR code server
mcp-inspector -- mcp-server-qrcode
#+end_src

** Development & Testing
For local development and testing, you can use additional CLI features:

#+begin_src bash
# Clone and set up the repository
git clone https://github.com/jwalsh/mcp-server-qrcode.git
cd mcp-server-qrcode
npm install
npm run build

# Run MCP server for Inspector testing
npm start

# Test CLI features locally (development only)
npm run cli -- -g "https://example.com"
npm run cli -- -g "https://example.com" -s 300 -e H

# Test stdin piping with the CLI (development only)
echo "https://example.com" | npm run cli
cat myfile.txt | npm run cli
#+end_src

** Claude Desktop

#+begin_src json :tangle generated/claude_desktop_config.json :mkdirp yes
  {
    "mcpServers": {
      "qrcode": {
        "args": [
          "-y",
          "@jwalsh/mcp-server-qrcode"
        ],
        "command": "npx"
      }
    }
  }
#+end_src

1. Open Claude Desktop
2. Use the integrated QR code generation feature
3. Select content to generate QR code




** Emacs (mcp.el)

#+begin_src elisp :tangle generated/mcp-server-qrcode.el :mkdirp yes
;; In Emacs with mcp.el loaded
(mcp-connect-server "qrcode" 
                    "npx" 
                    '("-y" "@jwalsh/mcp-server-qrcode")
                    :initial-callback
                    (lambda (connection)
                      (message "Connected to %s" (jsonrpc-name connection)))
                    :tools-callback
                    (lambda (connection tools)
                      (message "Available tools: %s" tools)))

#+end_src

* Configuration Options
- ~--size~: Set the size of the QR code in pixels (default: 200)
- ~--error-correction~: Set error correction level
  - ~L~: Low (7% of codewords can be restored)
  - ~M~: Medium (15% of codewords can be restored)
  - ~Q~: Quartile (25% of codewords can be restored)
  - ~H~: High (30% of codewords can be restored)

* Supported Input Types
- URLs
- Plain text
- Contact information
- Wi-Fi credentials
- Email addresses

* Developer Documentation
For detailed setup, installation, and contribution guidelines, please refer to [[file:DEVELOPERS.org][DEVELOPERS.org]].

* License
MIT License
