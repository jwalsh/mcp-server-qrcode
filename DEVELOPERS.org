#+TITLE: Developer Guide for MCP QR Code Server

* Prerequisites
** System Requirements
- Node.js >= 18.0.0
- ~qrencode~ utility installed on your system
  
*** MacOS Installation
#+begin_src bash
brew install qrencode
#+end_src

*** Linux (Debian/Ubuntu) Installation
#+begin_src bash
apt-get install qrencode
#+end_src

*** Linux (Red Hat/Fedora) Installation
#+begin_src bash
dnf install qrencode
#+end_src

* Installation
#+begin_src bash
# Clone the repository
git clone https://github.com/jwalsh/mcp-server-qrcode.git
cd mcp-server-qrcode

# Install dependencies
npm install

# Build the server
npm run build
#+end_src

* Development Setup

** Initial Project Setup
#+begin_src bash
# Initialize the project
make initialize

# Set up development environment
make setup
#+end_src

** Running the Project
#+begin_src bash
# Start in development mode
make dev

# Quick start the application
make quickstart
#+end_src

* Running the Server
#+begin_src bash :results silent
# Start the MCP server
npm start
#+end_src

#+begin_src bash :results raw :wrap example
# For local development with CLI features
npm run cli -- -g "Hello World"
#+end_src

#+begin_src bash :results raw :wrap example
# Test piping with the CLI
echo "Hello World" | npm run cli
#+end_src

The server will start and listen for MCP requests over stdin/stdout.

** Deployment Modes
This project supports two modes:

1. *MCP Server Mode (Production)*: When installed globally with ~npm install -g~, the ~mcp-server-qrcode~ command starts the MCP server with no CLI functionality. This is what end users will use with Claude Desktop, MCP Inspector, etc.

2. *CLI Mode (Development)*: For local development and testing, use ~npm run cli~ to access CLI features including stdin piping and command-line arguments. These features are not included in the published package.
* Architecture
The project consists of three main components:

1. A command-line interface (CLI) for generating QR codes (for development/testing)
2. An MCP server implementation for integration with MCP clients (primary use case)
3. Resource endpoints and predefined prompts for enhanced functionality

All components share the core QR code generation functionality defined in ~src/qrcode.ts~, which provides a unified interface for different output formats.

** System Architecture Diagram
#+begin_src mermaid :file docs/architecture-diagram.png :exports both
graph TD
    Client[MCP Client<br/>Claude/Inspector/Emacs] -->|JSON-RPC| Server[MCP Server]
    CLI[Command Line<br/>Interface] -->|Direct Call| QRCore[QR Code Core]
    Server -->|Internal Call| QRCore
    Server -->|Register| Tools[Tool: generate-qrcode]
    Server -->|Register| Resources[Resources<br/>qrcode://...]
    Server -->|Register| Prompts[Predefined<br/>Prompts]
    QRCore -->|Generate| QRText[Text QR]
    QRCore -->|Generate| QRImage[Image QR]
    subgraph "src/qrcode.ts"
        QRCore
    end
    subgraph "src/index.ts"
        Server
        Tools
        Resources
        Prompts
    end
    subgraph "src/cli.ts"
        CLI
    end
    subgraph "src/main.ts"
        Transport[StdIO Transport]
    end
    Server --> Transport
#+end_src

#+RESULTS:
[[file:docs/architecture-diagram.png]]

** Command-Line Interface (CLI)
The CLI supports multiple modes of operation (primarily for development and testing):

*** *Pipe mode*: Accept input via stdin
   #+begin_src bash :results raw :wrap example
   echo "https://example.com" | npm run cli
   #+end_src

   #+RESULTS:
   #+begin_example

   > @jwalsh/mcp-server-qrcode@1.0.2 cli
   > node build/cli.js

   █████████████████████████████████
   █████████████████████████████████
   ████ ▄▄▄▄▄ █▄▀ █ ▀ █▀█ ▄▄▄▄▄ ████
   ████ █   █ █▄ ▄█▀ ▀█▄█ █   █ ████
   ████ █▄▄▄█ █▀ █ ▀█ ███ █▄▄▄█ ████
   ████▄▄▄▄▄▄▄█▄▀▄█ █ ▀ █▄▄▄▄▄▄▄████
   ████ ▀▄▀▀▀▄▄▀▀    ▄▀▄▀▀ █▀▄▀ ████
   ████▄▀█▄▀ ▄▄▀   ▀▀█▄▀▄█▀▄ ▄█▄████
   █████▀▀▄ ▄▄▄ ▀ █ ▄█  █  ███▀ ████
   ████▄▄▄█▄▄▄▀▄▀█▀ ▄ ▄  ▄▀▀ ▄█▄████
   ████▄▄██▄█▄▄▀▄███  █ ▄▄▄ ██▄▀████
   ████ ▄▄▄▄▄ █▄█▄▄█▀█▀ █▄█ ██▀ ████
   ████ █   █ ██ █▄ ▄█▄▄ ▄▄ █▀ ▄████
   ████ █▄▄▄█ █▄ █▀ ▄    ▀  ▄█▄▄████
   ████▄▄▄▄▄▄▄█▄▄▄██▄▄█▄█▄██▄██▄████
   █████████████████████████████████
   █████████████████████████████████

   #+end_example

*** *Generate mode*: Generate QR code with command line options
   #+begin_src bash :results raw :wrap example
   npm run cli -- -g "Hello World" -s 300 -e H
   #+end_src

   #+RESULTS:
   #+begin_example

   > @jwalsh/mcp-server-qrcode@1.0.2 cli
   > node build/cli.js -g Hello World -s 300 -e H

   #+end_example


*** *Resource mode*: Generate QR code from a resource URI
   #+begin_src bash :results raw :wrap example
   npm run cli resource "qrcode://wifi?ssid=MyNetwork&password=password123"
   #+end_src

   #+RESULTS:
   #+begin_example

   > @jwalsh/mcp-server-qrcode@1.0.2 cli
   > node build/cli.js resource qrcode://wifi?ssid=MyNetwork&password=password123

   #+end_example

** MCP Server Implementation
The MCP server enables interaction with MCP clients like Claude Desktop and Inspector. It's implemented following the Model Context Protocol standards.

*** Core Implementation Structure
The ~index.ts~ file contains the primary MCP server implementation:

#+begin_src typescript :tangle generated/index-example.ts
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

// Create an MCP server
const server = new McpServer({
  name: "QR Code Generator",
  version: "0.3.6"
});

// Register capabilities
server.server.registerCapabilities({
  resources: {
    root: "qrcode://",
    get: true,
    list: true
  },
  prompts: {
    list: true
  }
});

// Add the QR code generation tool
server.tool(
  "generate-qrcode",
  "Generate QR codes in various formats with customizable error correction levels and sizes",
  {
    content: z.string().describe("The text content to encode in the QR code"),
    errorCorrectionLevel: z.enum(["L", "M", "Q", "H"])
      .describe("Error correction level (L: 7%, M: 15%, Q: 25%, H: 30%)")
      .optional()
      .default("M"),
    size: z.number()
      .min(1)
      .max(10)
      .describe("Size of the QR code (1-10)")
      .optional()
      .default(3),
    format: z.enum(["image", "text"])
      .describe("Output format: 'image' for PNG QR code, 'text' for terminal-friendly output")
      .optional()
      .default("image")
  },
  async ({ content, errorCorrectionLevel, size, format }) => {
    // Tool implementation...
  }
);

export default server;
#+end_src

*** Data Flow
1. Client sends a request to the MCP server
2. Server processes the request and determines operation type (tool call, resource, etc.)
3. QR code generation functionality in ~qrcode.ts~ is invoked with appropriate parameters
4. Result is formatted according to MCP specifications and returned to the client
5. Client displays or processes the QR code as needed

*** Server Entry Point
The ~main.ts~ file provides the entry point that connects the server to a transport:

#+begin_src typescript :tangle generated/main-example.ts
import server from './index.js';
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a stdio transport
const transport = new StdioServerTransport();

// Connect the server to the transport
server.connect(transport)
  .catch(error => {
    console.error('Failed to start server:', error);
    process.exit(1);
  });
#+end_src

*** Example MCP Server Implementations
For more sophisticated MCP server examples and patterns, refer to these implementations:

1. *File System Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/index.ts][filesystem/index.ts]]
   - Provides access to local files
   - Example of handling file resources

2. *GitHub Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/github/index.ts][github/index.ts]]
   - Provides access to GitHub repositories
   - Example of API integration

3. *Google Maps Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps/index.ts][google-maps/index.ts]]
   - Provides access to Google Maps
   - Example of API key authentication

4. *Everything Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/everything/index.ts][everything/index.ts]]
   - Desktop search integration
   - Example of local application integration
* Using with MCP Clients

** Claude Desktop 

#+begin_src json
  {
    "mcpServers": {
      "qrcode": {
        "args": [
          "$HOME/projects/mcp-server-qrcode/build/cli.js"
        ],
        "command": "node"
      }
    }
  }
#+end_src

For the published package, use:

#+begin_src json
  {
    "mcpServers": {
      "qrcode": {
        "args": [
          "-y",
          "@jwalsh/mcp-server-qrcode"
        ],
        "command": "npx"
      }
    }
  }
#+end_src

** Emacs with mcp.el
The QR code server can be used with Emacs via the mcp.el package:

#+begin_src elisp :tangle generated/mcp-server-qrcode.el
;; Basic installation with straight.el
(use-package mcp
  :straight (mcp :type git :host github :repo "lizqwerscott/mcp.el"))

;; Connect to the QR code server
(mcp-connect-server
 "qrcode" 
 "npx" 
 '("-y" "@jwalsh/mcp-server-qrcode")
 :initial-callback
 (lambda (connection)
   (message "Connected to %s" (jsonrpc-name connection)))
 :tools-callback
 (lambda (connection tools)
   (message "Available tools: %s" tools)))

;; Generate a QR code with text output
(defun mcp-qrcode-text (content)
  "Generate a text QR code for CONTENT."
  (interactive "sContent for QR code: ")
  (let ((connection (gethash "qrcode" mcp-server-connections)))
    (when connection
      (mcp-call-tool connection 
                    "generate-qrcode" 
                    (list :content content 
                          :format "text")))))

;; Generate a QR code with image output
(defun mcp-qrcode-image (content)
  "Generate an image QR code for CONTENT."
  (interactive "sContent for QR code: ")
  (let ((connection (gethash "qrcode" mcp-server-connections)))
    (when connection
      (mcp-call-tool connection 
                    "generate-qrcode" 
                    (list :content content 
                          :format "image")))))

;; Comprehensive QR code function with display capabilities
(defun qrcode-generate (content &optional format)
  "Generate QR code for CONTENT with optional FORMAT (text or image).
Displays the result in a dedicated buffer."
  (interactive "sContent for QR code: ")
  (let ((connection (gethash "qrcode" mcp-server-connections))
        (fmt (or format "text")))
    (if connection
        (let ((result (mcp-call-tool connection
                                    "generate-qrcode"
                                    (list :content content :format fmt))))
          (with-current-buffer (get-buffer-create "*QR Code*")
            (erase-buffer)
            (when (eq fmt "text")
              (insert (plist-get (aref (plist-get result :content) 1) :text)))
            (display-buffer (current-buffer))))
      (message "QR code server not connected. Run mcp-connect-server first."))))

;; For local development with direct path to build/main.js
(defun mcp-qrcode-connect-dev ()
  "Connect to local development QR code server."
  (interactive)
  (mcp-connect-server
   "qrcode-dev" 
   "node" 
   '("~/projects/mcp-server-qrcode/build/main.js")))
#+end_src

The code above provides several useful functions for working with QR codes in Emacs:

1. Installation via straight.el
2. Connection setup to the MCP QR code server
3. Simple functions for generating text and image QR codes
4. A comprehensive function that generates and displays QR codes
5. A helper function for connecting to a local development server

To use these functions, evaluate the code, then call one of the interactive functions such as `M-x mcp-qrcode-text` or `M-x qrcode-generate`.

** MCP Inspector

This server can be used with any MCP-compatible client. Here's how to use it with the MCP Inspector:

#+begin_src bash
# For MCP Inspector, use the main.js file
mcp-inspector -- node build/main.js

# Or use the Makefile target
make inspector-dev
#+end_src

For the MCP Inspector UI, use these settings:
- Transport Type: STDIO
- Command: node
- Arguments: build/main.js

Important: Always use build/main.js as the entry point for the MCP server when using the inspector.

** Command Line Piping

The server also supports direct piping from the command line:

#+begin_src bash
echo "https://example.com" | mcp-server-qrcode
#+end_src

#+RESULTS:

#+begin_src bash
  date > generated/myfile.txt
  cat generated/myfile.txt | mcp-server-qrcode
#+end_src

#+RESULTS:

* Testing

The project includes a comprehensive test suite built with Jest:

#+begin_src bash
# Run tests
make test

# Run tests with watch mode (for development)
make test-watch

# Run tests with coverage report
make test-coverage
#+end_src

The current test suite focuses on core QR code generation functionality with plans to expand coverage.

** Protocol Compliance Testing

The server can be verified against the MCP protocol using the included test script:

#+begin_src bash
./scripts/test-mcp-protocol.sh
#+end_src

This tests all key MCP protocol methods:
- initialize/initialized
- tools/list and tools/call
- resources/list
- prompts/list
- ping and shutdown

Output confirms proper implementation of all required MCP endpoints.

** Manual Testing and Debugging

Several tools are available for manual testing and debugging:

#+begin_src bash
# Test with MCP Inspector
make inspector-dev

# Test different resource formats
npm run cli resource "qrcode://sample"
npm run cli resource "qrcode://wifi?ssid=TestNetwork&password=test123"
#+end_src

[[file:docs/inspector.png]]

For detailed MCP debugging guidelines, see the [official MCP debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging).

** Test Structure

The test files are organized in the `src/__tests__` directory:
- `noop.test.ts` - Basic sanity tests
- `qr-generator.test.ts` - Tests for the core QR code generation functionality
- `templates.test.ts` - Tests for resource templates and schema validation

New tests should follow the existing pattern and focus on testing one feature or component at a time.
* Linting and Formatting
#+begin_src bash
# Lint code
make lint

# Automatically fix linting issues
make lint-fix

# Format code
make format
#+end_src

* Continuous Integration
#+begin_src bash
# Run all checks (lint, format, typecheck, test)
make ci
#+end_src

* Release Process

** Release Workflow
Follow these steps to release a new version of the package:

*** Automated Release Process
For the easiest release experience, use the provided release script:

#+begin_src bash
# For patch releases (default)
./scripts/release.sh

# For minor releases
./scripts/release.sh minor

# For major releases
./scripts/release.sh major
#+end_src

The script handles most of the process but pauses for manual npm publish (due to 2FA) and final verification.

*** Manual Release Process
If you need to execute the release steps manually:

1. *Update Version*: Bump the version in package.json
   #+begin_src bash
   # Use npm version to update package.json (creates a commit and tag automatically)
   npm version patch -m "chore: bump version to %s"  # or minor, major
   #+end_src

2. *Generate Changelog*: Update the CHANGELOG.org file
   #+begin_src bash
   npm run changelog
   #+end_src

3. *Commit Changelog*: Commit the changelog updates with [skip ci]
   #+begin_src bash
   # CRITICAL: Never use GPG signing for commits in this repo
   git add CHANGELOG.org
   git commit --no-gpg-sign -m "docs: update CHANGELOG.org for new version [skip ci]"
   #+end_src

4. *Push Changes*: Push the commits and tags
   #+begin_src bash
   git push origin main
   git push origin --tags
   #+end_src

5. *Create GitHub Release*: Create a release with notes from the changelog
   #+begin_src bash
   # Generate release tarball
   npm pack
   
   # Create draft release with the tarball
   VERSION=$(jq -r .version package.json)
   gh release create "v$VERSION" *.tgz --title "v$VERSION" --notes "See CHANGELOG.org for details" --draft
   #+end_src

6. *Pre-Release Verification*: Test with MCP Inspector before publishing
   #+begin_src bash
   # Verify server functionality with MCP Inspector
   make inspector-dev
   # Test in the inspector UI by creating a QR code
   #+end_src

7. *Publish to npm*: Publish the package (requires 2FA)
   #+begin_src bash
   npm publish
   #+end_src

8. *Verify Publication*: Confirm the package is properly published
   #+begin_src bash
   # Verify npm package
   npm view @jwalsh/mcp-server-qrcode version
   #+end_src

9. *Publish GitHub Release*: Remove draft status from the release
   #+begin_src bash
   gh release edit "v$VERSION" --draft=false
   #+end_src
   
   When validating with MCP Inspector, the successful connection should look like this:
   
   [[file:static/localhost_5173_.png][MCP Inspector Validation]]

* Contributing
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run ~make ci~ to ensure all checks pass
5. Submit a pull request

* Troubleshooting
- Ensure you're using Node.js 18.0.0 or higher
- Install ~qrencode~ utility for your system
- Run ~make initialize~ if you encounter dependency issues
- Check ~make setup~ for environment verification
