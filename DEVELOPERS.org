#+TITLE: Developer Guide for MCP QR Code Server

* Prerequisites
** System Requirements
- Node.js >= 18.0.0
- ~qrencode~ utility installed on your system
  
*** MacOS Installation
#+begin_src bash
brew install qrencode
#+end_src

*** Linux (Debian/Ubuntu) Installation
#+begin_src bash
apt-get install qrencode
#+end_src

*** Linux (Red Hat/Fedora) Installation
#+begin_src bash
dnf install qrencode
#+end_src

* Installation
#+begin_src bash
# Clone the repository
git clone https://github.com/jwalsh/mcp-server-qrcode.git
cd mcp-server-qrcode

# Install dependencies
npm install

# Build the server
npm run build
#+end_src

* Development Setup

** Initial Project Setup
#+begin_src bash
# Initialize the project
make initialize

# Set up development environment
make setup
#+end_src

** Running the Project
#+begin_src bash
# Start in development mode
make dev

# Quick start the application
make quickstart
#+end_src

* Running the Server
#+begin_src bash
# Start the MCP server
npm start

# For local development with CLI features
npm run cli -- -g "Hello World"

# Test piping with the CLI
echo "Hello World" | npm run cli
#+end_src

The server will start and listen for MCP requests over stdin/stdout.

** Deployment Modes

This project supports two modes:

1. *MCP Server Mode (Production)*: When installed globally with ~npm install -g~, the ~mcp-server-qrcode~ command starts the MCP server with no CLI functionality. This is what end users will use with Claude Desktop, MCP Inspector, etc.

2. *CLI Mode (Development)*: For local development and testing, use ~npm run cli~ to access CLI features including stdin piping and command-line arguments. These features are not included in the published package.

* Architecture

The project consists of two main components:

1. A command-line interface (CLI) for generating QR codes (for development/testing)
2. An MCP server implementation for integration with MCP clients (primary use case)

Both components share the core QR code generation functionality defined in ~src/qrcode.ts~, which provides a unified interface for different output formats.

** Command-Line Interface (CLI)

The CLI supports multiple modes of operation (primarily for development and testing):

1. *Pipe mode*: Accept input via stdin
   #+begin_src bash
   echo "https://example.com" | npm run cli
   #+end_src

2. *Generate mode*: Generate QR code with command line options
   #+begin_src bash
   npm run cli -- -g "https://example.com" -s 300 -e H
   #+end_src

** MCP Server Implementation

The MCP server enables interaction with MCP clients like Claude Desktop and Inspector. It's implemented following the Model Context Protocol standards.

*** Core Implementation Structure

The ~index.ts~ file contains the primary MCP server implementation:

#+begin_src typescript
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

// Create an MCP server
const server = new McpServer({
  name: "QR Code Generator",
  version: "0.1.0"
});

// Add the QR code generation tool
server.tool(
  "generate-qrcode",
  {
    content: z.string().describe("The text content to encode in the QR code"),
    errorCorrectionLevel: z.enum(["L", "M", "Q", "H"])
      .describe("Error correction level")
      .optional()
      .default("M"),
    // Other parameters...
  },
  async ({ content, errorCorrectionLevel, size, format }) => {
    // Tool implementation...
  }
);

export default server;
#+end_src

*** Server Entry Point

The ~main.ts~ file provides the entry point that connects the server to a transport:

#+begin_src typescript
import server from './index.js';
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

// Create a stdio transport
const transport = new StdioServerTransport();

// Connect the server to the transport
server.connect(transport)
  .catch(error => {
    console.error('Failed to start server:', error);
    process.exit(1);
  });
#+end_src

*** Example MCP Server Implementations

For more sophisticated MCP server examples and patterns, refer to these implementations:

1. *File System Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/index.ts][filesystem/index.ts]]
   - Provides access to local files
   - Example of handling file resources

2. *GitHub Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/github/index.ts][github/index.ts]]
   - Provides access to GitHub repositories
   - Example of API integration

3. *Google Maps Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps/index.ts][google-maps/index.ts]]
   - Provides access to Google Maps
   - Example of API key authentication

4. *Everything Server*: [[https://github.com/modelcontextprotocol/servers/blob/main/src/everything/index.ts][everything/index.ts]]
   - Desktop search integration
   - Example of local application integration

* Using with MCP Clients

** Claude Desktop 

#+begin_src json
  {
    "mcpServers": {
      "qrcode": {
        "args": [
          "$HOME/projects/mcp-server-qrcode/build/cli.js"
        ],
        "command": "node"
      }
    }
  }
#+end_src

** MCP Inspector

This server can be used with any MCP-compatible client. Here's how to use it with the MCP Inspector:

#+begin_src bash
# For MCP Inspector, use the main.js file
mcp-inspector -- node build/main.js
#+end_src

For the MCP Inspector UI, use these settings:
- Transport Type: STDIO
- Command: node
- Arguments: build/main.js

** Command Line Piping

The server also supports direct piping from the command line:

#+begin_src bash
echo "https://example.com" | mcp-server-qrcode
cat myfile.txt | mcp-server-qrcode
#+end_src

* Debugging 

- https://modelcontextprotocol.io/docs/tools/debugging

* Testing
#+begin_src bash
# Run tests
make test

# Run tests with watch
make test-watch

# Run tests with coverage
make test-coverage
#+end_src

* Linting and Formatting
#+begin_src bash
# Lint code
make lint

# Automatically fix linting issues
make lint-fix

# Format code
make format
#+end_src

* Continuous Integration
#+begin_src bash
# Run all checks (lint, format, typecheck, test)
make ci
#+end_src

* Release Process

** Release Workflow
Follow these steps to release a new version of the package:

1. *Update Version*: Bump the version in package.json
   #+begin_src bash
   # Use npm version to update package.json
   npm version patch  # or minor, major
   #+end_src

2. *Generate Changelog*: Update the CHANGELOG.org file
   #+begin_src bash
   npm run changelog
   #+end_src

3. *Commit Changes*: Commit the version and changelog updates
   #+begin_src bash
   # CRITICAL: Never use GPG signing for commits in this repo
   git add package.json package-lock.json CHANGELOG.org
   git commit --no-gpg-sign -m "chore: bump version to X.Y.Z"
   #+end_src

4. *Create Tag*: Tag the release
   #+begin_src bash
   git tag vX.Y.Z
   git push origin vX.Y.Z
   #+end_src

5. *Create GitHub Release*: Create a release with notes from the changelog
   #+begin_src bash
   # Generate release tarball
   npm pack
   
   # Create draft release with the tarball
   gh release create vX.Y.Z --notes "Release notes here" --title "vX.Y.Z" --draft
   gh release upload vX.Y.Z *.tgz
   #+end_src

6. *Publish to npm*: Publish the package (requires 2FA)
   #+begin_src bash
   npm publish
   #+end_src

7. *Publish GitHub Release*: Remove draft status from the release
   #+begin_src bash
   gh release edit vX.Y.Z --draft=false
   #+end_src

8. *Verify Release*: Confirm successful publication
   #+begin_src bash
   # Verify npm package
   npm view @jwalsh/mcp-server-qrcode version
   
   # Verify GitHub release
   gh release view vX.Y.Z --json name,isDraft,publishedAt
   #+end_src

** Automated Release
For minor and major releases, you can use the release script:
#+begin_src bash
# For minor releases
npm run release:minor

# For major releases
npm run release:major
#+end_src

* Contributing
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run ~make ci~ to ensure all checks pass
5. Submit a pull request

* Troubleshooting
- Ensure you're using Node.js 18.0.0 or higher
- Install ~qrencode~ utility for your system
- Run ~make initialize~ if you encounter dependency issues
- Check ~make setup~ for environment verification
